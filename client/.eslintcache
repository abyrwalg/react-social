[{"d:\\My\\Coding\\Node JS\\social\\client\\src\\index.js":"1","d:\\My\\Coding\\Node JS\\social\\client\\src\\App.js":"2","d:\\My\\Coding\\Node JS\\social\\client\\src\\context\\AuthContext.js":"3","d:\\My\\Coding\\Node JS\\social\\client\\src\\hooks\\userMenu.hook.js":"4","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\SignUpPage\\SignUpPage.js":"5","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\LoginPage\\LoginPage.js":"6","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\UserPage.js":"7","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UI\\Layout\\Layout.js":"8","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\EditUserDataPage\\EditUserDataPage.js":"9","d:\\My\\Coding\\Node JS\\social\\client\\src\\hooks\\http.hook.js":"10","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\MainData\\MainData.js":"11","d:\\My\\Coding\\Node JS\\social\\client\\src\\utils\\utils.js":"12","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UI\\Spinner\\Spinner.js":"13","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\UserImageBlock\\UserImageBlock.js":"14","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\EditUserDataPage\\MainData\\MainData.js":"15","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UI\\Layout\\AvatarDropdownToggle\\AvatarDropdownToggle.js":"16","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\EditUserDataPage\\PersonalData\\PersonalData.js":"17","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\Wall\\Wall.js":"18","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\EditUserDataPage\\Career\\Career.js":"19","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\EditUserDataPage\\Education\\Education.js":"20","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\MainData\\Education\\Education.js":"21","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\MainData\\Career\\Career.js":"22","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\MainData\\MainInfo\\MainInfo.js":"23","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\MainData\\Header\\Header.js":"24","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\MainData\\PersonalData\\PersonalData.js":"25","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\UserImageBlock\\AvatarModal\\AvatarModal.js":"26","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\Wall\\PostForm\\PostForm.js":"27","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\EditUserDataPage\\Career\\WorkPlace\\WorkPlace.js":"28","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\Wall\\Post\\Post.js":"29","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\EditUserDataPage\\Education\\Higher\\Higher.js":"30","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\EditUserDataPage\\Education\\Secondary\\Secondary.js":"31","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\Wall\\Post\\DropdownMenuButton\\DropdownMenuButton.js":"32","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\EditUserDataPage\\Education\\Secondary\\SecondaryElem\\SecondaryElem.js":"33","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\EditUserDataPage\\Education\\Higher\\HigherElem\\HigherElem.js":"34","d:\\My\\Coding\\Node JS\\social\\client\\src\\containers\\PrivateRoute\\index.js":"35","d:\\My\\Coding\\Node JS\\social\\client\\src\\helpers\\authStorage.js":"36","d:\\My\\Coding\\Node JS\\social\\client\\src\\config\\axiosConfig.js":"37"},{"size":323,"mtime":1631032846267,"results":"38","hashOfConfig":"39"},{"size":1811,"mtime":1631034571265,"results":"40","hashOfConfig":"39"},{"size":301,"mtime":1631022022145,"results":"41","hashOfConfig":"39"},{"size":425,"mtime":1631021811820,"results":"42","hashOfConfig":"39"},{"size":2916,"mtime":1631022390401,"results":"43","hashOfConfig":"39"},{"size":3480,"mtime":1631033527569,"results":"44","hashOfConfig":"39"},{"size":1200,"mtime":1631022046251,"results":"45","hashOfConfig":"39"},{"size":3952,"mtime":1631034288984,"results":"46","hashOfConfig":"39"},{"size":2815,"mtime":1631033032393,"results":"47","hashOfConfig":"39"},{"size":1273,"mtime":1631031212711,"results":"48","hashOfConfig":"39"},{"size":911,"mtime":1631022236930,"results":"49","hashOfConfig":"39"},{"size":7559,"mtime":1631021976198,"results":"50","hashOfConfig":"39"},{"size":184,"mtime":1631022349943,"results":"51","hashOfConfig":"39"},{"size":1842,"mtime":1631022195643,"results":"52","hashOfConfig":"39"},{"size":3309,"mtime":1631023618201,"results":"53","hashOfConfig":"39"},{"size":850,"mtime":1631022375210,"results":"54","hashOfConfig":"39"},{"size":3347,"mtime":1631026533362,"results":"55","hashOfConfig":"39"},{"size":1413,"mtime":1631022079621,"results":"56","hashOfConfig":"39"},{"size":7850,"mtime":1631022489747,"results":"57","hashOfConfig":"39"},{"size":997,"mtime":1631022507285,"results":"58","hashOfConfig":"39"},{"size":1660,"mtime":1631022319587,"results":"59","hashOfConfig":"39"},{"size":1331,"mtime":1631022334075,"results":"60","hashOfConfig":"39"},{"size":1240,"mtime":1631022288259,"results":"61","hashOfConfig":"39"},{"size":4017,"mtime":1631022301745,"results":"62","hashOfConfig":"39"},{"size":1660,"mtime":1631022270382,"results":"63","hashOfConfig":"39"},{"size":4287,"mtime":1631022215452,"results":"64","hashOfConfig":"39"},{"size":2023,"mtime":1631022085190,"results":"65","hashOfConfig":"39"},{"size":2448,"mtime":1631022652556,"results":"66","hashOfConfig":"39"},{"size":6334,"mtime":1631022095283,"results":"67","hashOfConfig":"39"},{"size":8221,"mtime":1631022625169,"results":"68","hashOfConfig":"39"},{"size":8159,"mtime":1631022553610,"results":"69","hashOfConfig":"39"},{"size":369,"mtime":1631022101443,"results":"70","hashOfConfig":"39"},{"size":4460,"mtime":1631022568317,"results":"71","hashOfConfig":"39"},{"size":4501,"mtime":1631022585878,"results":"72","hashOfConfig":"39"},{"size":574,"mtime":1631032327024,"results":"73","hashOfConfig":"39"},{"size":850,"mtime":1631032048733,"results":"74","hashOfConfig":"39"},{"size":1863,"mtime":1631033995378,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1r8zwhs",{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"85","messages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"87","messages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"82"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"82"},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"82"},{"filePath":"104","messages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"82"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"82"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"82"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"82"},{"filePath":"122","messages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"124","messages":"125","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"128","messages":"129","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"82"},{"filePath":"133","messages":"134","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"82"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"82"},{"filePath":"141","messages":"142","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"82"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"82"},{"filePath":"149","messages":"150","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"82"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"82"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"82"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"82"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"d:\\My\\Coding\\Node JS\\social\\client\\src\\index.js",[],"d:\\My\\Coding\\Node JS\\social\\client\\src\\App.js",[],"d:\\My\\Coding\\Node JS\\social\\client\\src\\context\\AuthContext.js",[],["166","167","168","169","170"],"d:\\My\\Coding\\Node JS\\social\\client\\src\\hooks\\userMenu.hook.js",[],"d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\SignUpPage\\SignUpPage.js",[],"d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\LoginPage\\LoginPage.js",["171","172"],"d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\UserPage.js",["173"],"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport Col from 'react-bootstrap/Col';\nimport Row from 'react-bootstrap/Row';\n\nimport UserImageBlock from './UserImageBlock/UserImageBlock';\nimport MainData from './MainData/MainData';\nimport Spinner from '../UI/Spinner/Spinner';\nimport Wall from './Wall/Wall';\nimport { useHttp } from '../../hooks/http.hook';\n\nimport classes from './UserPage.module.css';\n\nconst UserInfo = () => {\n  const [userData, setUserData] = useState(null);\n  const { request } = useHttp();\n  const { id } = useParams();\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const data = await request(`/api/user/${id}`, 'GET');\n        setUserData(data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetchData();\n  }, [id, request]);\n\n  return userData ? (\n    <Row className={classes.UserPage}>\n      <Col lg={4}>\n        <UserImageBlock avatar={userData.header.avatar} id={id} />\n      </Col>\n      <Col lg={8}>\n        <MainData userData={userData} id={id} />\n        <Wall id={userData._id} />\n      </Col>\n    </Row>\n  ) : (\n    <Spinner />\n  );\n};\n\nexport default UserInfo;\n","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UI\\Layout\\Layout.js",["174","175"],"d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\EditUserDataPage\\EditUserDataPage.js",["176"],"d:\\My\\Coding\\Node JS\\social\\client\\src\\hooks\\http.hook.js",["177"],"import { useState, useCallback } from 'react';\n\nimport axios from 'axios';\n\nexport const useHttp = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const request = useCallback(\n    async (url, method = 'GET', body = null, headers = {}) => {\n      setLoading(true);\n      try {\n        if (body) {\n          // eslint-disable-next-line no-param-reassign\n          body = JSON.stringify(body);\n          // eslint-disable-next-line no-param-reassign\n          headers['Content-Type'] = 'application/json';\n        }\n        // const response = await fetch(url, { method, body, headers });\n        // const data = await response.json();\n        const response = await axios({ url, method, data: body, headers });\n        const { data } = response;\n\n        console.log(response.statusText);\n\n        /* if (response.statusText !== 'OK') {\n          throw new Error(data.message || 'Что-то пошло не так');\n        } */\n        setLoading(false);\n        return data;\n      } catch (err) {\n        setLoading(false);\n        setError(err.message);\n        throw err;\n      }\n    },\n    []\n  );\n\n  const clearError = useCallback(() => setError(null), []);\n\n  return { loading, request, error, clearError };\n};\n","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\MainData\\MainData.js",[],"d:\\My\\Coding\\Node JS\\social\\client\\src\\utils\\utils.js",["178","179"],"/* eslint-disable guard-for-in */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-useless-escape */\nimport React from 'react';\n\nimport Form from 'react-bootstrap/Form';\n\nfunction validateEmail(email) {\n  const re =\n    /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  return re.test(email);\n}\n\nexport const validateForm = (formData, setForm) => {\n  let updatedFormData = {};\n  let valid = true;\n\n  for (const input in formData) {\n    const updatedInputData = { ...formData[input] };\n    // Validate email\n    updatedInputData.isInvalid = false;\n    if (\n      formData[input].validation.type === 'email' &&\n      !validateEmail(formData[input].value.trim())\n    ) {\n      updatedInputData.isInvalid = true;\n      updatedInputData.errorMessage = 'Введите корректный email';\n    }\n\n    // Validate password confirmation\n    if (input === 'passwordConfirm' && formData.password.value.trim() !== '') {\n      if (formData[input].value.trim() !== formData.password.value) {\n        updatedInputData.isInvalid = true;\n        updatedInputData.errorMessage = 'Пароли не совпадают';\n      }\n    }\n\n    // Validate length\n    if (formData[input].validation.min && formData[input].validation.max) {\n      if (\n        (formData[input].value.trim().length < formData[input].validation.min ||\n          formData[input].value.trim().length >\n            formData[input].validation.max) &&\n        formData[input].value.trim() !== ''\n      ) {\n        updatedInputData.isInvalid = true;\n        updatedInputData.errorMessage = `Длина поля должна составлять от ${formData[input].validation.min} до ${formData[input].validation.max} символов`;\n      }\n    }\n\n    if (\n      formData[input].validation.required &&\n      formData[input].value.trim() === ''\n    ) {\n      updatedInputData.isInvalid = true;\n      updatedInputData.errorMessage = 'Необходимо заполнить это поле';\n    }\n\n    if (updatedInputData.isInvalid) {\n      valid = false;\n    }\n\n    updatedFormData = { ...updatedFormData, [input]: updatedInputData };\n  }\n\n  setForm(updatedFormData);\n  return valid;\n};\n\nexport const validateFormArray = (formArray, setForm) => {\n  let valid = true;\n\n  formArray.forEach((formData, index) => {\n    if (formData.removed) {\n      return;\n    }\n    let updatedFormData = {};\n    for (const input in formData) {\n      if (input === 'empty') {\n        updatedFormData = { ...updatedFormData, empty: true };\n        // continue;\n        return;\n      }\n      const updatedInputData = { ...formData[input] };\n      // Validate email\n      updatedInputData.isInvalid = false;\n      if (\n        formData[input].validation.type === 'email' &&\n        !validateEmail(formData[input].value.trim())\n      ) {\n        updatedInputData.isInvalid = true;\n        updatedInputData.errorMessage = 'Введите корректный email';\n      }\n\n      // Validate password confirmation\n      if (\n        input === 'passwordConfirm' &&\n        formData.password.value.trim() !== ''\n      ) {\n        if (formData[input].value.trim() !== formData.password.value) {\n          updatedInputData.isInvalid = true;\n          updatedInputData.errorMessage = 'Пароли не совпадают';\n        }\n      }\n\n      // Validate length\n      if (formData[input].validation.min && formData[input].validation.max) {\n        if (\n          (formData[input].value.trim().length <\n            formData[input].validation.min ||\n            formData[input].value.trim().length >\n              formData[input].validation.max) &&\n          formData[input].value.trim() !== ''\n        ) {\n          updatedInputData.isInvalid = true;\n          updatedInputData.errorMessage = `Длина поля должна составлять от ${formData[input].validation.min} до ${formData[input].validation.max} символов`;\n        }\n      }\n\n      // Validate year\n      if (formData[input].validation.type === 'year') {\n        if (\n          (formData[input].value.trim().length !== 4 ||\n            // eslint-disable-next-line no-restricted-globals\n            isNaN(formData[input].value.trim()) ||\n            formData[input].value.charAt(0) === '0') &&\n          formData[input].value.trim() !== ''\n        ) {\n          updatedInputData.isInvalid = true;\n          updatedInputData.errorMessage = `Введите корректный год`;\n        }\n      }\n\n      if (\n        formData[input].validation.required &&\n        formData[input].value.trim() === ''\n      ) {\n        updatedInputData.isInvalid = true;\n        updatedInputData.errorMessage = 'Необходимо заполнить это поле';\n      }\n\n      if (updatedInputData.isInvalid) {\n        valid = false;\n      }\n\n      updatedFormData = { ...updatedFormData, [input]: updatedInputData };\n    }\n\n    setForm((prevForm) => {\n      const newForm = [...prevForm];\n      newForm[index] = updatedFormData;\n      return newForm;\n    });\n  });\n\n  return valid;\n};\n\nconst inputHandler = (event, form, setForm) => {\n  const newValue = event.target.value;\n  const inputObject = {\n    ...form[event.target.name],\n    value: newValue,\n    isInvalid: false,\n  };\n\n  setForm((prevForm) => {\n    return { ...prevForm, [event.target.name]: inputObject };\n  });\n};\n\nexport const formSubmitHandler = (event, form, setForm, url) => {\n  event.preventDefault();\n  const isValid = validateForm(form, setForm);\n\n  if (isValid) {\n    const clearedFormData = {};\n\n    for (const key in form) {\n      clearedFormData[key] = form[key].value;\n    }\n\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify(clearedFormData),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((response) => response.json())\n      .then((result) => {\n        console.log(result);\n      })\n      .catch((error) => console.log(error));\n  }\n};\n\nexport const createForm = (formData, setForm) => {\n  const formContent = [];\n  for (const key in formData) {\n    formContent.push(\n      <Form.Group controlId={`formBasic${key}`} key={key}>\n        <Form.Label>{formData[key].label}</Form.Label>\n        <Form.Control\n          type={formData[key].type}\n          name={key}\n          placeholder={formData[key].placeholder}\n          value={formData[key].value}\n          onChange={(event) => inputHandler(event, formData, setForm)}\n          isInvalid={formData[key].isInvalid}\n          as={formData[key].type === 'textarea' ? 'textarea' : 'input'}\n          maxLength=\"512\"\n        />\n        <Form.Control.Feedback type=\"invalid\">\n          {formData[key].errorMessage}\n        </Form.Control.Feedback>\n      </Form.Group>\n    );\n  }\n  return formContent;\n};\n\nexport const createFormPart = (form, changeHandler) => {\n  const JSX = [];\n\n  for (const key in form) {\n    if (key === 'empty') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n    JSX.push(\n      <Form.Group controlId=\"formBasicName\" key={key}>\n        <Form.Label>{form[key].label}</Form.Label>\n        <Form.Control\n          type={form[key].type}\n          name={key}\n          placeholder={form[key].placeholder}\n          value={form[key].value}\n          onChange={changeHandler}\n          isInvalid={form[key].isInvalid}\n        />\n        <Form.Control.Feedback type=\"invalid\">\n          {form[key].errorMessage}\n        </Form.Control.Feedback>\n      </Form.Group>\n    );\n  }\n  return JSX;\n};\n","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UI\\Spinner\\Spinner.js",[],"d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\UserImageBlock\\UserImageBlock.js",[],"d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\EditUserDataPage\\MainData\\MainData.js",["180"],"/* eslint-disable react/destructuring-assignment */\nimport React, { useContext, useState } from 'react';\n\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nimport classes from './MainData.module.css';\nimport { createForm, validateForm } from '../../../utils/utils';\nimport { useHttp } from '../../../hooks/http.hook';\nimport { AuthContext } from '../../../context/AuthContext';\n\nexport const MainData = (props) => {\n  const { token, changeUsername } = useContext(AuthContext);\n  const { request, loading } = useHttp();\n  const date = new Date(props.data.birthdate);\n  const birthdateFieldValue = `${date.getFullYear().toString()}-${(\n    date.getMonth() + 1\n  )\n    .toString()\n    .padStart(2, 0)}-${date.getDate().toString().padStart(2, 0)}`;\n\n  const [form, setForm] = useState({\n    name: {\n      value: props.data.name,\n      type: 'text',\n      label: 'Имя',\n      placeholder: 'Введите имя',\n      validation: {\n        required: true,\n        min: 1,\n        max: 120,\n      },\n      isInvalid: false,\n      errorMessage: null,\n    },\n    surname: {\n      value: props.data.surname,\n      type: 'text',\n      label: 'Фамилия',\n      placeholder: 'Введите фамилию',\n      validation: {\n        required: true,\n        min: 1,\n        max: 120,\n      },\n      isInvalid: false,\n      errorMessage: null,\n    },\n    birthdate: {\n      value: birthdateFieldValue,\n      type: 'date',\n      label: 'День рождения',\n      validation: {\n        required: true,\n      },\n      isInvalid: false,\n      errorMessage: null,\n    },\n    country: {\n      value: props.data.country,\n      type: 'text',\n      label: 'Страна',\n      placeholder: 'Введите страну проживания',\n      validation: {\n        required: false,\n        min: 1,\n        max: 120,\n      },\n      isInvalid: false,\n      errorMessage: null,\n    },\n    city: {\n      value: props.data.city,\n      type: 'text',\n      label: 'Город',\n      placeholder: 'Введите город проживания',\n      validation: {\n        required: false,\n        min: 1,\n        max: 120,\n      },\n      isInvalid: false,\n      errorMessage: null,\n    },\n  });\n\n  const submitFormHandler = async (event) => {\n    event.preventDefault();\n    const valid = validateForm(form, setForm);\n    if (valid) {\n      try {\n        await request('api/user/main-data', 'PUT', form, {\n          Authorization: `Bearer ${token}`,\n        });\n        changeUsername(form.name.value);\n        props.showAlert('success', 'Изменения успешно сохранены');\n        props.alertRef.current.scrollIntoView();\n      } catch (error) {\n        console.log(error);\n        props.showAlert('danger', error.message);\n        props.alertRef.current.scrollIntoView();\n      }\n    }\n  };\n\n  return (\n    <Card className={classes.MainData}>\n      <Card.Body>\n        <Form noValidate onSubmit={submitFormHandler}>\n          {createForm(form, setForm)}\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            className=\"w-100\"\n            disabled={loading}\n          >\n            Сохранить\n          </Button>\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n};\n","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UI\\Layout\\AvatarDropdownToggle\\AvatarDropdownToggle.js",[],"d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\EditUserDataPage\\PersonalData\\PersonalData.js",["181"],"/* eslint-disable import/named */\n/* eslint-disable react/destructuring-assignment */\nimport React, { useContext, useState } from 'react';\n\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nimport classes from './PersonalData.module.css';\nimport { createForm, validateForm } from '../../../utils/utils';\nimport { useHttp } from '../../../hooks/http.hook';\nimport { AuthContext } from '../../../context/AuthContext';\n\nexport const PersonalData = (props) => {\n  const { token } = useContext(AuthContext);\n  const { request, loading } = useHttp();\n  const [form, setForm] = useState({\n    interests: {\n      value: props.data.interests,\n      type: 'textarea',\n      label: 'Интересы',\n      placeholder: 'Перечислите свои интересы',\n      validation: {\n        required: false,\n        min: 1,\n        max: 512,\n      },\n      isInvalid: false,\n      errorMessage: null,\n    },\n    favoriteBooks: {\n      value: props.data.favoriteBooks,\n      type: 'textarea',\n      label: 'Любимые книги',\n      placeholder: 'Перечислите свои любимые книги',\n      validation: {\n        required: false,\n        min: 1,\n        max: 512,\n      },\n      isInvalid: false,\n      errorMessage: null,\n    },\n    favoriteMovies: {\n      value: props.data.favoriteMovies,\n      type: 'textarea',\n      label: 'Любимые фильмы',\n      placeholder: 'Перечислите свои любимые фильмы',\n      validation: {\n        required: false,\n        min: 1,\n        max: 512,\n      },\n      isInvalid: false,\n      errorMessage: null,\n    },\n    favoriteMusic: {\n      value: props.data.favoriteMusic,\n      type: 'textarea',\n      label: 'Любимая музыка',\n      placeholder: 'Перечислите любимых исполнителей',\n      validation: {\n        required: false,\n        min: 1,\n        max: 512,\n      },\n      isInvalid: false,\n      errorMessage: null,\n    },\n    about: {\n      value: props.data.about,\n      type: 'textarea',\n      label: 'О себе',\n      placeholder: 'Расскажите о себе',\n      validation: {\n        required: false,\n        min: 1,\n        max: 512,\n      },\n      isInvalid: false,\n      errorMessage: null,\n    },\n  });\n\n  const submitFormHander = async (event) => {\n    event.preventDefault();\n    const valid = validateForm(form, setForm);\n    if (!valid) {\n      return;\n    }\n\n    try {\n      await request('api/user/personal-data', 'PUT', form, {\n        Authorization: `Bearer ${token}`,\n      });\n      props.showAlert('success', 'Изменения успешно сохранены');\n      props.alertRef.current.scrollIntoView();\n    } catch (error) {\n      console.log(error);\n      props.showAlert('danger', error.message);\n      props.alertRef.current.scrollIntoView();\n    }\n  };\n\n  return (\n    <Card className={classes.PersonalData} onSubmit={submitFormHander}>\n      <Card.Body>\n        <Form noValidate>\n          {createForm(form, setForm)}\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            className=\"w-100\"\n            disabled={loading}\n          >\n            Сохранить\n          </Button>\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n};\n","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\Wall\\Wall.js",["182"],"import React, { useEffect, useState, useContext } from 'react';\n\nimport Card from 'react-bootstrap/Card';\n\nimport PostForm from './PostForm/PostForm';\nimport Post from './Post/Post';\n\nimport classes from './Wall.module.css';\nimport { useHttp } from '../../../hooks/http.hook';\nimport { AuthContext } from '../../../context/AuthContext';\n\nconst Wall = (props) => {\n  const { id } = props;\n  const { request } = useHttp();\n  const { isAuthenticated } = useContext(AuthContext);\n  const [comments, setComments] = useState([]);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const data = await request(`/api/comments/${id}`, 'GET');\n        setComments(data.comments);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    fetchData();\n  }, [id, request]);\n\n  let componentContent = (\n    <Card className={classes.Wall}>\n      <Card.Body className={classes.cardBody}>\n        {isAuthenticated ? (\n          <PostForm id={id} setComments={setComments} comments={comments} />\n        ) : null}\n        {comments.map((comment) => (\n          <Post\n            comment={comment}\n            key={comment._id}\n            comments={comments}\n            setComments={setComments}\n          />\n        ))}\n      </Card.Body>\n    </Card>\n  );\n\n  if (!isAuthenticated && comments.length === 0) {\n    componentContent = null;\n  }\n\n  return componentContent;\n};\n\nexport default Wall;\n","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\EditUserDataPage\\Career\\Career.js",["183","184"],"/* eslint-disable no-continue */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-shadow */\nimport React, { useContext, useState } from 'react';\n\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nimport classes from './Career.module.css';\nimport { validateFormArray } from '../../../utils/utils';\nimport { WorkPlace } from './WorkPlace/WorkPlace';\nimport { useHttp } from '../../../hooks/http.hook';\nimport { AuthContext } from '../../../context/AuthContext';\n\nexport const Career = (props) => {\n  const { data } = props;\n\n  const { token } = useContext(AuthContext);\n  const { request, loading } = useHttp();\n  const [addedFormElementsCounter, setAddedFormElementsCounter] = useState(0);\n  const [form, setForm] = useState(\n    data.map((element) => {\n      const form = {\n        workplace: {\n          value: element.workplace,\n          type: 'text',\n          label: 'Место работы',\n          placeholder: 'Укажите место работы',\n          validation: {\n            required: true,\n            min: 3,\n            max: 120,\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        city: {\n          value: element.city,\n          type: 'text',\n          label: 'Город',\n          placeholder: 'Укажите город',\n          validation: {\n            required: false,\n            min: 3,\n            max: 120,\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        position: {\n          value: element.position,\n          type: 'text',\n          label: 'Должность',\n          placeholder: 'Укажите должность',\n          validation: {\n            required: false,\n            min: 3,\n            max: 120,\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        yearStart: {\n          value: element.yearStart,\n          type: 'text',\n          label: 'Год начала работы',\n          placeholder: 'Укажите год начала работы',\n          validation: {\n            required: false,\n            type: 'year',\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        yearEnd: {\n          value: element.yearEnd,\n          type: 'text',\n          label: 'Год окончания работы',\n          placeholder: 'Укажите год окончания работы',\n          validation: {\n            required: false,\n            type: 'year',\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n      };\n      return form;\n    })\n  );\n\n  const addJobHandler = () => {\n    setForm((prevForm) => [\n      ...prevForm,\n      {\n        workplace: {\n          value: '',\n          type: 'text',\n          label: 'Место работы',\n          placeholder: 'Укажите место работы',\n          validation: {\n            required: true,\n            min: 3,\n            max: 120,\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        city: {\n          value: '',\n          type: 'text',\n          label: 'Город',\n          placeholder: 'Укажите город',\n          validation: {\n            required: false,\n            min: 3,\n            max: 120,\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        position: {\n          value: '',\n          type: 'text',\n          label: 'Должность',\n          placeholder: 'Укажите должность',\n          validation: {\n            required: false,\n            min: 3,\n            max: 120,\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        yearStart: {\n          value: '',\n          type: 'text',\n          label: 'Год начала работы',\n          placeholder: 'Укажите год начала работы',\n          validation: {\n            required: false,\n            type: 'year',\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        yearEnd: {\n          value: '',\n          type: 'text',\n          label: 'Год окончания работы',\n          placeholder: 'Укажите год окончания работы',\n          validation: {\n            required: false,\n            type: 'year',\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        empty: true,\n      },\n    ]);\n    setAddedFormElementsCounter((prevCounter) => prevCounter + 1);\n  };\n\n  const showHiddenFormElement = (index) => {\n    setForm((prevForm) => {\n      const newForm = [...prevForm];\n      delete newForm[index].removed;\n      return newForm;\n    });\n  };\n\n  const submitFormHandler = async (event) => {\n    event.preventDefault();\n    const valid = validateFormArray(form, setForm);\n    if (valid) {\n      const formToSend = [];\n      form.forEach((element) => {\n        if (element.removed) {\n          return;\n        }\n        const formPart = {};\n        for (const key in element) {\n          if (key === 'empty') {\n            continue;\n          }\n          formPart[key] = element[key].value;\n        }\n        formToSend.push(formPart);\n      });\n      try {\n        await request('api/user/career', 'PUT', formToSend, {\n          Authorization: `Bearer ${token}`,\n        });\n        props.showAlert('success', 'Изменения успешно сохранены');\n        props.alertRef.current.scrollIntoView();\n        setForm((prevForm) => {\n          console.log(prevForm);\n          const updatedForm = prevForm.filter((element) => !element.removed);\n          updatedForm.forEach((element) => {\n            delete element.empty;\n          });\n\n          return updatedForm;\n        });\n        setAddedFormElementsCounter(0);\n      } catch (error) {\n        console.log(error);\n        props.showAlert('danger', error.message);\n        props.alertRef.current.scrollIntoView();\n      }\n    }\n  };\n\n  return (\n    <Card className={classes.Career}>\n      <Card.Body>\n        <Form noValidate onSubmit={submitFormHandler}>\n          {form.map((element, index) =>\n            !element.removed ? (\n              <WorkPlace\n                // eslint-disable-next-line react/no-array-index-key\n                key={index}\n                form={element}\n                setForm={setForm}\n                fullForm={form}\n                setCounter={setAddedFormElementsCounter}\n              />\n            ) : (\n              <p className={classes.hiddenMessage}>\n                <span\n                  className={classes.undo}\n                  onClick={() => showHiddenFormElement(index)}\n                >\n                  Не удалять\n                </span>\n                <span className={classes.hiddenInfo}>\n                  Эта запись будет удалена после сохранения изменений\n                </span>\n              </p>\n            )\n          )}\n          {addedFormElementsCounter < 3 ? (\n            <>\n              <p\n                className={classes.addInstitution}\n                onClick={addJobHandler}\n                // eslint-disable-next-line jsx-a11y/no-noninteractive-element-to-interactive-role\n                role=\"button\"\n                tabIndex={0}\n              >\n                +Добавить место работы\n              </p>\n              <hr />\n            </>\n          ) : null}\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            className=\"w-100\"\n            disabled={loading}\n          >\n            Сохранить\n          </Button>\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n};\n","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\EditUserDataPage\\Education\\Education.js",[],"d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\MainData\\Education\\Education.js",[],"d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\MainData\\Career\\Career.js",[],"d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\MainData\\MainInfo\\MainInfo.js",[],"d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\MainData\\Header\\Header.js",["185"],"/* eslint-disable react/destructuring-assignment */\nimport React, {\n  useContext,\n  useState,\n  useEffect,\n  useRef,\n  useCallback,\n} from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nimport { AuthContext } from '../../../../context/AuthContext';\nimport { useHttp } from '../../../../hooks/http.hook';\nimport classes from './Header.module.css';\n\nexport const Header = (props) => {\n  const { uid, token } = useContext(AuthContext);\n  const { request, loading } = useHttp();\n  const statusFormRef = useRef(null);\n  const statusInputRef = useRef(null);\n  const allowStatusChange = uid === +props.id;\n  const [showStatusForm, setShowStatusForm] = useState(false);\n  const [prevStatus, setPrevStatus] = useState(props.data.status);\n  const [status, setStatus] = useState(props.data.status);\n  const [buttonState, setButtonState] = useState('Отмена');\n\n  useEffect(() => {\n    if (statusInputRef.current !== null) {\n      statusInputRef.current.focus();\n    }\n  }, [showStatusForm]);\n\n  useEffect(() => {\n    if (status === prevStatus) {\n      setButtonState('Отмена');\n    } else {\n      setButtonState('Изменить');\n    }\n  }, [prevStatus, status]);\n\n  useEffect(() => {\n    setStatus(props.data.status);\n  }, [props.data.status]);\n\n  const editStatusHandler = () => {\n    if (!allowStatusChange) {\n      return;\n    }\n    setShowStatusForm(true);\n  };\n\n  const changeStatusHandler = (event) => {\n    setStatus(event.target.value);\n  };\n\n  const submitFormHandler = async (event) => {\n    event.preventDefault();\n    if (buttonState === 'Отмена') {\n      setShowStatusForm(false);\n    } else if (buttonState === 'Изменить') {\n      const updateStatus = { status };\n      try {\n        await request('/api/user/status', 'PATCH', updateStatus, {\n          Authorization: `Bearer ${token}`,\n        });\n        setShowStatusForm(false);\n        setPrevStatus(status);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n  };\n\n  let statusJSX = (\n    <span>\n      {status ? (\n        <span\n          className={allowStatusChange && classes.canChange}\n          onClick={editStatusHandler}\n        >\n          {status}\n        </span>\n      ) : (\n        allowStatusChange && (\n          <span\n            className={`${classes.changeStatus} ${classes.canChange}`}\n            onClick={editStatusHandler}\n          >\n            изменить статус\n          </span>\n        )\n      )}\n    </span>\n  );\n\n  if (showStatusForm) {\n    statusJSX = (\n      <form\n        className={classes.statusForm}\n        onSubmit={submitFormHandler}\n        ref={statusFormRef}\n      >\n        <Form.Label htmlFor=\"inlineFormInputName2\" srOnly>\n          Статус\n        </Form.Label>\n        <Form.Control\n          className=\"mb-2 mr-sm-2\"\n          id=\"inlineFormInputName2\"\n          placeholder=\"Введите статус\"\n          value={status}\n          onChange={changeStatusHandler}\n          ref={statusInputRef}\n          maxLength={120}\n        />\n\n        <Button type=\"submit\" className=\"mb-2\" disabled={loading}>\n          {buttonState}\n        </Button>\n      </form>\n    );\n  }\n\n  const clickHandler = useCallback(\n    (event) => {\n      if (!statusFormRef.current) {\n        return;\n      }\n\n      if (\n        !statusFormRef.current.contains(event.target) &&\n        !event.target.classList.contains(classes.canChange)\n      ) {\n        setShowStatusForm(false);\n        setStatus(prevStatus);\n      }\n    },\n    [prevStatus]\n  );\n\n  useEffect(() => {\n    document.addEventListener('click', clickHandler);\n    return () => {\n      document.removeEventListener('click', clickHandler);\n    };\n  }, [clickHandler]);\n\n  return (\n    <>\n      <Card.Title className=\"pb-2\">\n        {`${props.data.name} ${props.data.surname}`}\n      </Card.Title>\n      <Card.Subtitle className=\"mb-2 text-muted\">\n        {statusJSX}\n        <hr />\n      </Card.Subtitle>\n    </>\n  );\n};\n","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\MainData\\PersonalData\\PersonalData.js",[],"d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\UserImageBlock\\AvatarModal\\AvatarModal.js",["186"],"/* eslint-disable react/destructuring-assignment */\nimport React, { useContext, useState } from 'react';\n\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Image from 'react-bootstrap/Image';\nimport Form from 'react-bootstrap/Form';\n\nimport classes from './AvatarModal.module.css';\nimport { AuthContext } from '../../../../context/AuthContext';\nimport { useHttp } from '../../../../hooks/http.hook';\nimport defaultUserpic from '../../../../assets/images/default-userpic.png';\n\nexport const AvatarModal = (props) => {\n  const { request, loading: loadingHook } = useHttp();\n  const { token, changeAvatar } = useContext(AuthContext);\n  const [uploadFile, setUploadFile] = useState(null);\n  const [uploadStatus, setUploadStatus] = useState({\n    isInvalid: false,\n    message: 'Выберите аватар',\n  });\n  const [loading, setLoading] = useState(false);\n  const avatarUrl = props.avatar ? `/${props.avatar}` : defaultUserpic;\n\n  const uploadChangeHandler = (event) => {\n    const allowedExtensions = /(\\.jpg|\\.jpeg|\\.png|\\.gif)$/i;\n    if (!allowedExtensions.exec(event.target.files[0].name)) {\n      setUploadStatus({\n        isInvalid: true,\n        message: 'Поддерживаются только изображения форматов JPEG, PNG и GIF',\n      });\n    } else if (event.target.files[0].size > 1024 * 1024 * 2) {\n      setUploadStatus({\n        isInvalid: true,\n        message: 'Размер изображения не должен превышать 2 МБ',\n      });\n    } else {\n      setUploadFile(event.target.files[0]);\n      setUploadStatus({\n        isInvalid: false,\n        message: event.target.files[0].name,\n      });\n    }\n  };\n\n  const submitFormHandler = async (event) => {\n    event.preventDefault();\n    const formData = new FormData();\n    formData.append('avatar', uploadFile);\n    try {\n      setLoading(true);\n      const response = await fetch('/api/user/avatar', {\n        method: 'POST',\n        body: formData,\n        headers: {\n          Authorization: `Bearer ${token}`,\n        },\n      });\n\n      const result = await response.json();\n      if (response.ok) {\n        props.setAvatar(result.avatar);\n        changeAvatar(result.avatar);\n        setUploadStatus({ isInvalid: false, message: '' });\n        setUploadFile('');\n        props.handleClose();\n      } else {\n        setUploadStatus({ isInvalid: true, message: result.message });\n        setUploadFile('');\n      }\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      setUploadStatus({ isInvalid: true, message: error.message });\n    }\n  };\n\n  const deleteAvatarHandler = async () => {\n    try {\n      await request('/api/user/avatar', 'DELETE', null, {\n        Authorization: `Bearer ${token}`,\n      });\n      changeAvatar('');\n      props.setAvatar(null);\n      props.handleClose();\n      setUploadFile('');\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <Modal show={props.show} onHide={props.handleClose} centered size=\"lg\">\n      <Modal.Header closeButton>\n        <Modal.Title>Ваш аватар</Modal.Title>\n      </Modal.Header>\n      <Modal.Body className={classes.modalBody}>\n        <Image src={avatarUrl} fluid />\n      </Modal.Body>\n      <Modal.Footer className={classes.modalFooter}>\n        <Form className={classes.uploadForm} onSubmit={submitFormHandler}>\n          <Form.File\n            id=\"custom-file\"\n            label={uploadStatus.message}\n            custom\n            data-browse=\"Выбрать\"\n            onChange={uploadChangeHandler}\n            isInvalid={uploadStatus.isInvalid}\n            className={classes.imageInput}\n          />\n          <Button\n            variant=\"primary\"\n            type=\"submit\"\n            disabled={uploadStatus.isInvalid || loading || !uploadFile}\n          >\n            Обновить\n          </Button>\n        </Form>\n        <div className={classes.buttonContainer}>\n          <Button\n            variant=\"secondary\"\n            onClick={deleteAvatarHandler}\n            className={classes.deleteButton}\n            disabled={!props.avatar || loadingHook}\n          >\n            Удалить аватар\n          </Button>\n        </div>\n      </Modal.Footer>\n    </Modal>\n  );\n};\n","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\Wall\\PostForm\\PostForm.js",["187","188","189"],"import React, { useState, useContext, useRef, useEffect } from 'react';\n\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nimport classes from './PostForm.module.css';\n\nimport { useHttp } from '../../../../hooks/http.hook';\nimport { AuthContext } from '../../../../context/AuthContext';\n\nexport default function PostForm(props) {\n  const { request, loading } = useHttp();\n  const { token } = useContext(AuthContext);\n  const [commentText, setCommentText] = useState('');\n  const [textareaHeight, setTextareaHeight] = useState(100);\n  const textareaRef = useRef(null);\n\n  useEffect(() => {\n    setTextareaHeight(textareaRef.current.scrollHeight);\n  }, [commentText]);\n\n  const submitFormHandler = async (event) => {\n    event.preventDefault();\n    try {\n      console.log(loading);\n      setCommentText('');\n      const data = await request(\n        '/api/comments',\n        'POST',\n        {\n          parent: props.id,\n          content: commentText,\n        },\n        { Authorization: `Bearer ${token}` }\n      );\n      console.log(loading);\n      props.setComments([data.comment, ...props.comments]);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const textAreaChangeHandler = (event) => {\n    setCommentText(event.target.value);\n    setTextareaHeight(0);\n  };\n\n  return (\n    <Form className={classes.PostForm} onSubmit={submitFormHandler}>\n      <Form.Group controlId=\"postForm\">\n        <Form.Control\n          as=\"textarea\"\n          placeholder=\"Напишите что-нибудь\"\n          className={classes.textArea}\n          value={commentText}\n          onChange={textAreaChangeHandler}\n          ref={textareaRef}\n          style={{ height: textareaHeight }}\n          rows={3}\n        />\n      </Form.Group>\n      <Button\n        variant=\"primary\"\n        type=\"submit\"\n        className={classes.submitButton}\n        disabled={!(commentText.trim().length > 0) || loading}\n      >\n        Опубликовать\n      </Button>\n    </Form>\n  );\n}\n","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\EditUserDataPage\\Career\\WorkPlace\\WorkPlace.js",[],"d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\Wall\\Post\\Post.js",["190","191","192"],"import React, { useContext, useState, useEffect, useRef } from 'react';\n\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport Dropdown from 'react-bootstrap/Dropdown';\n\nimport { Link } from 'react-router-dom';\n\nimport 'font-awesome/css/font-awesome.min.css';\n\nimport classes from './Post.module.css';\n\nimport DropdownMenuButton from './DropdownMenuButton/DropdownMenuButton';\n\nimport { useHttp } from '../../../../hooks/http.hook';\nimport { AuthContext } from '../../../../context/AuthContext';\n\nexport default function Post(props) {\n  const { comment } = props;\n  const postDate = new Date(comment.date);\n  const dateOptions = { year: 'numeric', month: 'long', day: 'numeric' };\n  const avatarPath = comment.avatar.replace(/\\\\/g, '/');\n  const { token, id } = useContext(AuthContext);\n  const [showEditArea, setShowEditArea] = useState(false);\n  const [editAreaContent, setEditAreaContent] = useState(comment.content);\n  const [editAreaHeight, setEditAreaHeight] = useState(0);\n  const [likesCount, setLikesCount] = useState(comment.likes.length);\n  const [likesIconClass, setLikesIconClass] = useState(\n    comment.likes.includes(id) ? `fa fa-heart ${classes.red}` : 'fa fa-heart-o'\n  );\n  const editAreaRef = useRef(null);\n  const { request, loading } = useHttp();\n\n  const [hideDropdownMenuClass, setHideDropdownMenuClass] = useState('');\n  let hideEdiCommentButtonClass = '';\n\n  useEffect(() => {\n    if (comment.parent !== id && comment.author !== id) {\n      setHideDropdownMenuClass(classes.hide);\n    }\n  }, [comment.author, comment.parent, id]);\n\n  if (comment.author !== id) {\n    hideEdiCommentButtonClass = classes.hide;\n  }\n\n  useEffect(() => {\n    setEditAreaHeight(editAreaRef.current.scrollHeight);\n  }, [editAreaContent]);\n\n  const deletePostHandler = async () => {\n    try {\n      await request(\n        '/api/comments',\n        'DELETE',\n        { ...comment },\n        { Authorization: `Bearer ${token}` }\n      );\n      const comments = props.comments.filter(\n        (element) => element._id !== comment._id\n      );\n      props.setComments(comments);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const editAreaChangeHandler = (event) => {\n    setEditAreaContent(event.target.value);\n    setEditAreaHeight(0);\n  };\n\n  const showEditPostHandler = () => {\n    setShowEditArea(true);\n\n    setTimeout(() => {\n      editAreaRef.current.focus();\n      setEditAreaHeight(editAreaRef.current.scrollHeight);\n      editAreaRef.current.selectionStart = editAreaRef.current.value.length;\n      editAreaRef.current.selectionEnd = editAreaRef.current.value.length;\n    }, 10);\n    setHideDropdownMenuClass(classes.hide);\n  };\n\n  const hideEditPostHandler = () => {\n    setShowEditArea(false);\n    setEditAreaContent(comment.content);\n    setHideDropdownMenuClass('');\n  };\n\n  const submitEditedPostHandler = async () => {\n    try {\n      await request(\n        '/api/comments',\n        'PUT',\n        { ...comment, content: editAreaContent },\n        { Authorization: `Bearer ${token}` }\n      );\n      const comments = [...props.comments];\n      const commentIndex = props.comments.indexOf(comment);\n      comments[commentIndex] = {\n        ...comments[commentIndex],\n        content: editAreaContent,\n      };\n      hideEditPostHandler();\n      props.setComments(comments);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const likeHandler = async () => {\n    try {\n      const data = await request(\n        '/api/comments/likes',\n        'POST',\n        { id: comment._id },\n        { Authorization: `Bearer ${token}` }\n      );\n      setLikesCount(data.likes.length);\n      setLikesIconClass(\n        data.likes.includes(id) ? `fa fa-heart ${classes.red}` : 'fa fa-heart-o'\n      );\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <Card className={classes.Post}>\n      <Card.Body>\n        <Card.Title className={classes.postHeader}>\n          <Link to={`/users/${comment.uid}`}>\n            <div\n              style={{ backgroundImage: `url(/${avatarPath})` }}\n              className={classes.avatar}\n            />\n          </Link>\n          <Link className={classes.userName} to={`/users/${comment.uid}`}>\n            {comment.userName}\n          </Link>\n          <span className={classes.date}>\n            {postDate.toLocaleDateString('ru-RU', dateOptions)}\n          </span>\n          <Dropdown\n            className={`${classes.dropDownButton} ${hideDropdownMenuClass}`}\n          >\n            <Dropdown.Toggle as={DropdownMenuButton} />\n            <Dropdown.Menu>\n              <Dropdown.Item onClick={deletePostHandler}>Удалить</Dropdown.Item>\n              <Dropdown.Item\n                onClick={showEditPostHandler}\n                className={hideEdiCommentButtonClass}\n              >\n                Редактировать\n              </Dropdown.Item>\n            </Dropdown.Menu>\n          </Dropdown>\n        </Card.Title>\n        <Card.Text as=\"div\">\n          <Form\n            className={`${classes.editComment} ${\n              !showEditArea ? classes.hide : null\n            }`}\n          >\n            <Form.Control\n              as=\"textarea\"\n              value={editAreaContent}\n              onChange={editAreaChangeHandler}\n              ref={editAreaRef}\n              style={{ height: editAreaHeight }}\n            />\n            <div className={classes.editCommentButtons}>\n              <Button variant=\"secondary\" onClick={hideEditPostHandler}>\n                Отмена\n              </Button>\n              <Button\n                variant=\"primary\"\n                onClick={submitEditedPostHandler}\n                disabled={loading}\n              >\n                Сохранить\n              </Button>\n            </div>\n          </Form>\n          <div className={showEditArea ? classes.hide : null}>\n            {comment.content}\n          </div>\n        </Card.Text>\n      </Card.Body>\n      <Card.Footer className={classes.postFooter}>\n        <i\n          className={`${likesIconClass} ${classes.like}`}\n          onClick={likeHandler}\n        />\n        <span className={classes.likesCount}>{likesCount}</span>\n        <i className={`fa fa-comment-o ${classes.comments}`} />\n      </Card.Footer>\n    </Card>\n  );\n}\n","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\EditUserDataPage\\Education\\Higher\\Higher.js",["193","194"],"/* eslint-disable jsx-a11y/no-noninteractive-element-to-interactive-role */\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n/* eslint-disable no-continue */\n/* eslint-disable react/no-array-index-key */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-shadow */\nimport React, { useContext, useState } from 'react';\n\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nimport 'font-awesome/css/font-awesome.min.css';\n\nimport { HigherElem } from './HigherElem/HigherElem';\nimport classes from './Higher.module.css';\nimport { validateFormArray } from '../../../../utils/utils';\nimport { AuthContext } from '../../../../context/AuthContext';\nimport { useHttp } from '../../../../hooks/http.hook';\n\nexport const Higher = (props) => {\n  const { data } = props;\n\n  const { token } = useContext(AuthContext);\n  const { request, loading } = useHttp();\n  const [addedFormElementsCounter, setAddedFormElementsCounter] = useState(0);\n  const [form, setForm] = useState(\n    data.map((element) => {\n      const form = {\n        name: {\n          value: element.name,\n          type: 'text',\n          label: 'Вуз',\n          placeholder: 'Укажите название вуза',\n          validation: {\n            required: true,\n            min: 1,\n            max: 120,\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        specialty: {\n          value: element.specialty,\n          type: 'text',\n          label: 'Специальность',\n          placeholder: 'Укажите специальность',\n          validation: {\n            required: false,\n            min: 1,\n            max: 120,\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        status: {\n          value: element.status,\n          type: 'text',\n          label: 'Статус',\n          placeholder: 'Укажите статус (например, студент)',\n          validation: {\n            required: false,\n            min: 1,\n            max: 120,\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        yearStart: {\n          value: element.yearStart,\n          type: 'text',\n          label: 'Год начала обучения',\n          placeholder: 'Укажите год начала обучения',\n          validation: {\n            required: false,\n            type: 'year',\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        yearEnd: {\n          value: element.yearEnd,\n          type: 'text',\n          label: 'Год окончания обучения',\n          placeholder: 'Укажите год окончания обучения',\n          validation: {\n            required: false,\n            type: 'year',\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n      };\n      return form;\n    })\n  );\n\n  const addInstitutionHandler = () => {\n    setForm((prevForm) => [\n      ...prevForm,\n      {\n        name: {\n          value: '',\n          type: 'text',\n          label: 'Вуз',\n          placeholder: 'Укажите название вуза',\n          validation: {\n            required: true,\n            min: 1,\n            max: 120,\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        specialty: {\n          value: '',\n          type: 'text',\n          label: 'Специальность',\n          placeholder: 'Укажите специальность',\n          validation: {\n            required: false,\n            min: 1,\n            max: 120,\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        status: {\n          value: '',\n          type: 'text',\n          label: 'Статус',\n          placeholder: 'Укажите статус (например, студент)',\n          validation: {\n            required: false,\n            min: 1,\n            max: 120,\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        yearStart: {\n          value: '',\n          type: 'text',\n          label: 'Год начала обучения',\n          placeholder: 'Укажите год начала обучения',\n          validation: {\n            required: false,\n            type: 'year',\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        yearEnd: {\n          value: '',\n          type: 'text',\n          label: 'Год окончания обучения',\n          placeholder: 'Укажите год окончания обучения',\n          validation: {\n            required: false,\n            type: 'year',\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        empty: true,\n      },\n    ]);\n    setAddedFormElementsCounter((prevCounter) => prevCounter + 1);\n  };\n\n  const showHiddenFormElement = (index) => {\n    setForm((prevForm) => {\n      const newForm = [...prevForm];\n      delete newForm[index].removed;\n      return newForm;\n    });\n  };\n\n  const submitFormHandler = async (event) => {\n    event.preventDefault();\n    const valid = validateFormArray(form, setForm);\n\n    if (valid) {\n      const formToSend = [];\n\n      form.forEach((element) => {\n        if (element.removed) {\n          return;\n        }\n        const formPart = { type: 'Вуз' };\n        for (const key in element) {\n          if (key === 'empty') {\n            continue;\n          }\n          formPart[key] = element[key].value;\n        }\n        formToSend.push(formPart);\n      });\n      try {\n        await request('api/user/education', 'PUT', formToSend, {\n          Authorization: `Bearer ${token}`,\n          institution: 'higher',\n        });\n\n        props.showAlert('success', 'Изменения успешно сохранены');\n\n        props.alertRef.current.scrollIntoView();\n        setForm((prevForm) => {\n          console.log(prevForm);\n          const updatedForm = prevForm.filter((element) => !element.removed);\n          updatedForm.forEach((element) => {\n            delete element.empty;\n          });\n\n          return updatedForm;\n        });\n        setAddedFormElementsCounter(0);\n      } catch (error) {\n        console.log(error);\n        props.showAlert('danger', error.message);\n        props.alertRef.current.scrollIntoView();\n      }\n    }\n  };\n\n  return (\n    <>\n      <Card className={classes.Higher}>\n        <Card.Body>\n          <Form noValidate onSubmit={submitFormHandler}>\n            {form.map((element, index) =>\n              !element.removed ? (\n                <HigherElem\n                  key={index}\n                  form={element}\n                  setForm={setForm}\n                  fullForm={form}\n                  setCounter={setAddedFormElementsCounter}\n                />\n              ) : (\n                <p className={classes.hiddenMessage}>\n                  <span\n                    className={classes.undo}\n                    onClick={() => showHiddenFormElement(index)}\n                  >\n                    Не удалять\n                  </span>\n                  <span className={classes.hiddenInfo}>\n                    Эта запись будет удалена после сохранения изменений\n                  </span>\n                </p>\n              )\n            )}\n            {addedFormElementsCounter < 3 ? (\n              <>\n                <p\n                  className={classes.addInstitution}\n                  onClick={addInstitutionHandler}\n                  role=\"button\"\n                >\n                  +Добавить учебное заведение\n                </p>\n                <hr />\n              </>\n            ) : null}\n\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              className=\"w-100\"\n              disabled={loading}\n            >\n              Сохранить\n            </Button>\n          </Form>\n        </Card.Body>\n      </Card>\n      <hr />\n    </>\n  );\n};\n","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\EditUserDataPage\\Education\\Secondary\\Secondary.js",["195","196"],"/* eslint-disable react/no-array-index-key */\n/* eslint-disable jsx-a11y/no-noninteractive-element-to-interactive-role */\n/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n/* eslint-disable no-param-reassign */\n/* eslint-disable no-continue */\n/* eslint-disable no-restricted-syntax */\n/* eslint-disable no-shadow */\nimport React, { useState, useContext } from 'react';\n\nimport Card from 'react-bootstrap/Card';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\n\nimport classes from './Secondary.module.css';\nimport { SecondaryElem } from './SecondaryElem/SecondaryElem';\nimport { validateFormArray } from '../../../../utils/utils';\nimport { AuthContext } from '../../../../context/AuthContext';\nimport { useHttp } from '../../../../hooks/http.hook';\n\nexport const Secondary = (props) => {\n  const { data } = props;\n  const { token } = useContext(AuthContext);\n  const { request, loading } = useHttp();\n  const [addedFormElementsCounter, setAddedFormElementsCounter] = useState(0);\n\n  const [form, setForm] = useState(\n    data.map((element) => {\n      const form = {\n        name: {\n          value: element.name,\n          type: 'text',\n          label: 'Школа',\n          placeholder: 'Укажите название школы',\n          validation: {\n            required: true,\n            min: 1,\n            max: 120,\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        city: {\n          value: element.city,\n          type: 'text',\n          label: 'Город',\n          placeholder: 'Укажите город',\n          validation: {\n            required: false,\n            min: 1,\n            max: 120,\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        status: {\n          value: element.status,\n          type: 'text',\n          label: 'Статус',\n          placeholder: 'Укажите статус (например, студент)',\n          validation: {\n            required: false,\n            min: 1,\n            max: 120,\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        yearStart: {\n          value: element.yearStart,\n          type: 'text',\n          label: 'Год начала обучения',\n          placeholder: 'Укажите год начала обучения',\n          validation: {\n            required: false,\n            type: 'year',\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        yearEnd: {\n          value: element.yearEnd,\n          type: 'text',\n          label: 'Год окончания обучения',\n          placeholder: 'Укажите год окончания обучения',\n          validation: {\n            required: false,\n            type: 'year',\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n      };\n      return form;\n    })\n  );\n\n  const addInstitutionHandler = () => {\n    setForm((prevForm) => [\n      ...prevForm,\n      {\n        name: {\n          value: '',\n          type: 'text',\n          label: 'Школа',\n          placeholder: 'Укажите название школы',\n          validation: {\n            required: true,\n            min: 1,\n            max: 120,\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        city: {\n          value: '',\n          type: 'text',\n          label: 'Город',\n          placeholder: 'Укажите город',\n          validation: {\n            required: false,\n            min: 1,\n            max: 120,\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        status: {\n          value: '',\n          type: 'text',\n          label: 'Статус',\n          placeholder: 'Укажите статус (например, студент)',\n          validation: {\n            required: false,\n            min: 1,\n            max: 120,\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        yearStart: {\n          value: '',\n          type: 'text',\n          label: 'Год начала обучения',\n          placeholder: 'Укажите год начала обучения',\n          validation: {\n            required: false,\n            type: 'year',\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        yearEnd: {\n          value: '',\n          type: 'text',\n          label: 'Год окончания обучения',\n          placeholder: 'Укажите год окончания обучения',\n          validation: {\n            required: false,\n            type: 'year',\n          },\n          isInvalid: false,\n          errorMessage: null,\n        },\n        empty: true,\n      },\n    ]);\n    setAddedFormElementsCounter((prevCounter) => prevCounter + 1);\n  };\n\n  const showHiddenFormElement = (index) => {\n    setForm((prevForm) => {\n      const newForm = [...prevForm];\n      delete newForm[index].removed;\n      return newForm;\n    });\n  };\n\n  const submitFormHandler = async (event) => {\n    event.preventDefault();\n    const valid = validateFormArray(form, setForm);\n\n    if (valid) {\n      const formToSend = [];\n\n      form.forEach((element) => {\n        if (element.removed) {\n          return;\n        }\n        const formPart = { type: 'Школа' };\n        for (const key in element) {\n          if (key === 'empty') {\n            continue;\n          }\n          formPart[key] = element[key].value;\n        }\n        formToSend.push(formPart);\n      });\n      try {\n        await request('api/user/education', 'PUT', formToSend, {\n          Authorization: `Bearer ${token}`,\n          institution: 'school',\n        });\n\n        props.showAlert('success', 'Изменения успешно сохранены');\n\n        props.alertRef.current.scrollIntoView();\n        setForm((prevForm) => {\n          console.log(prevForm);\n          const updatedForm = prevForm.filter((element) => !element.removed);\n          updatedForm.forEach((element) => {\n            delete element.empty;\n          });\n\n          return updatedForm;\n        });\n        setAddedFormElementsCounter(0);\n      } catch (error) {\n        console.log(error);\n        props.showAlert('danger', error.message);\n        props.alertRef.current.scrollIntoView();\n      }\n    }\n  };\n\n  return (\n    <>\n      <Card className={classes.Secondary}>\n        <Card.Body className={classes.Secondary}>\n          <Form noValidate onSubmit={submitFormHandler}>\n            {form.map((element, index) =>\n              !element.removed ? (\n                <SecondaryElem\n                  key={index}\n                  form={element}\n                  setForm={setForm}\n                  fullForm={form}\n                  setCounter={setAddedFormElementsCounter}\n                />\n              ) : (\n                <p className={classes.hiddenMessage}>\n                  <span\n                    className={classes.undo}\n                    onClick={() => showHiddenFormElement(index)}\n                  >\n                    Не удалять\n                  </span>\n                  <span className={classes.hiddenInfo}>\n                    Эта запись будет удалена после сохранения изменений\n                  </span>\n                </p>\n              )\n            )}\n            {addedFormElementsCounter < 3 ? (\n              <>\n                <p\n                  className={classes.addInstitution}\n                  onClick={addInstitutionHandler}\n                  role=\"button\"\n                >\n                  +Добавить учебное заведение\n                </p>\n                <hr />\n              </>\n            ) : null}\n            <Button\n              variant=\"primary\"\n              type=\"submit\"\n              className=\"w-100\"\n              disabled={loading}\n            >\n              Сохранить\n            </Button>\n          </Form>\n        </Card.Body>\n      </Card>\n      <hr />\n    </>\n  );\n};\n","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\UserPage\\Wall\\Post\\DropdownMenuButton\\DropdownMenuButton.js",[],"d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\EditUserDataPage\\Education\\Secondary\\SecondaryElem\\SecondaryElem.js",["197"],"import React from 'react';\n\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\n// import Form from \"react-bootstrap/Form\";\n\nimport classes from './SecondaryElem.module.css';\nimport { createFormPart } from '../../../../../utils/utils';\n\nexport const SecondaryElem = (props) => {\n  const { form, setForm, fullForm, setCounter } = props;\n\n  const changeHandler = (event) => {\n    const index = fullForm.indexOf(form);\n\n    setForm((prevForm) => {\n      const newForm = [...prevForm];\n      newForm[index][event.target.name].value = event.target.value;\n      return newForm;\n    });\n  };\n\n  const hideFormElementHandler = () => {\n    const index = fullForm.indexOf(form);\n    setForm((prevForm) => {\n      const newForm = [...prevForm];\n      newForm[index].removed = true;\n      console.log(newForm);\n      return newForm;\n    });\n  };\n\n  const deleteEmptyFormElementHandler = () => {\n    const index = fullForm.indexOf(form);\n    setForm((prevForm) => {\n      const newForm = [...prevForm];\n      newForm.splice(index, 1);\n      return newForm;\n    });\n    setCounter((prevCounter) => prevCounter - 1);\n  };\n\n  return (\n    <>\n      <div className={classes.formBlock}>\n        <span className={classes.closeIcon}>\n          <OverlayTrigger\n            placement=\"top\"\n            overlay={<Tooltip id=\"tooltip\">Удалить</Tooltip>}\n          >\n            <i\n              className=\"fa fa-times\"\n              onClick={\n                !form.empty\n                  ? hideFormElementHandler\n                  : deleteEmptyFormElementHandler\n              }\n            />\n          </OverlayTrigger>\n        </span>\n        {createFormPart(form, changeHandler)}\n        {/* <Form.Group controlId={\"formBasicName\"}>\n          <Form.Label>Школа</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Укажите название школы\"\n            value={form.name.value}\n            onChange={changeHandler}\n            isInvalid={form.name.isInvalid}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            {form.name.errorMessage}\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group controlId={\"formBasicSpecialty\"}>\n          <Form.Label>Город</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"city\"\n            placeholder=\"Укажите город\"\n            value={form.city.value}\n            onChange={changeHandler}\n            isInvalid={form.city.isInvalid}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            {form.city.errorMessage}\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group controlId={\"formBasicStatus\"}>\n          <Form.Label>Статус</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"status\"\n            placeholder=\"Укажите статус (например, студент)\"\n            value={form.status.value}\n            onChange={changeHandler}\n            isInvalid={form.status.isInvalid}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            {form.status.errorMessage}\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group controlId={\"formBasicYearStart\"}>\n          <Form.Label>Год начала обучения</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"yearStart\"\n            placeholder=\"Укажите год начала обучения\"\n            value={form.yearStart.value}\n            onChange={changeHandler}\n            isInvalid={form.yearStart.isInvalid}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            {form.yearStart.errorMessage}\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group controlId={\"formBasicYearEnd\"}>\n          <Form.Label>Год окончания обучения</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"yearEnd\"\n            placeholder=\"Укажите год окончания обучения\"\n            value={form.yearEnd.value}\n            onChange={changeHandler}\n            isInvalid={form.yearEnd.isInvalid}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            {form.yearEnd.errorMessage}\n          </Form.Control.Feedback>\n        </Form.Group> */}\n      </div>\n      <hr />\n    </>\n  );\n};\n","d:\\My\\Coding\\Node JS\\social\\client\\src\\components\\EditUserDataPage\\Education\\Higher\\HigherElem\\HigherElem.js",["198"],"import React from 'react';\n\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Tooltip from 'react-bootstrap/Tooltip';\n// import Form from \"react-bootstrap/Form\";\n\nimport classes from './HigherElem.module.css';\nimport { createFormPart } from '../../../../../utils/utils';\n\nexport const HigherElem = (props) => {\n  const { form, setForm, fullForm, setCounter } = props;\n\n  const changeHandler = (event) => {\n    const index = fullForm.indexOf(form);\n\n    setForm((prevForm) => {\n      const newForm = [...prevForm];\n      newForm[index][event.target.name].value = event.target.value;\n      return newForm;\n    });\n  };\n\n  const hideFormElementHandler = () => {\n    const index = fullForm.indexOf(form);\n    setForm((prevForm) => {\n      const newForm = [...prevForm];\n      newForm[index].removed = true;\n      console.log(newForm);\n      return newForm;\n    });\n  };\n\n  const deleteEmptyFormElementHandler = () => {\n    const index = fullForm.indexOf(form);\n    setForm((prevForm) => {\n      const newForm = [...prevForm];\n      newForm.splice(index, 1);\n      return newForm;\n    });\n    setCounter((prevCounter) => prevCounter - 1);\n  };\n\n  return (\n    <>\n      <div className={classes.formBlock}>\n        <span className={classes.closeIcon}>\n          <OverlayTrigger\n            placement=\"top\"\n            overlay={<Tooltip id=\"tooltip\">Удалить</Tooltip>}\n          >\n            <i\n              className=\"fa fa-times\"\n              onClick={\n                !form.empty\n                  ? hideFormElementHandler\n                  : deleteEmptyFormElementHandler\n              }\n            />\n          </OverlayTrigger>\n        </span>\n        {createFormPart(form, changeHandler)}\n        {/*  <Form.Group controlId={\"formBasicName\"}>\n          <Form.Label>Вуз</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Укажите название вуза\"\n            value={form.name.value}\n            onChange={changeHandler}\n            isInvalid={form.name.isInvalid}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            {form.name.errorMessage}\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group controlId={\"formBasicSpecialty\"}>\n          <Form.Label>Специальность</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"specialty\"\n            placeholder=\"Укажите специальность\"\n            value={form.specialty.value}\n            onChange={changeHandler}\n            isInvalid={form.specialty.isInvalid}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            {form.specialty.errorMessage}\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group controlId={\"formBasicStatus\"}>\n          <Form.Label>Статус</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"status\"\n            placeholder=\"Укажите статус (например, студент)\"\n            value={form.status.value}\n            onChange={changeHandler}\n            isInvalid={form.status.isInvalid}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            {form.status.errorMessage}\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group controlId={\"formBasicYearStart\"}>\n          <Form.Label>Год начала обучения</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"yearStart\"\n            placeholder=\"Укажите год начала обучения\"\n            value={form.yearStart.value}\n            onChange={changeHandler}\n            isInvalid={form.yearStart.isInvalid}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            {form.yearStart.errorMessage}\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Form.Group controlId={\"formBasicYearEnd\"}>\n          <Form.Label>Год окончания обучения</Form.Label>\n          <Form.Control\n            type=\"text\"\n            name=\"yearEnd\"\n            placeholder=\"Укажите год окончания обучения\"\n            value={form.yearEnd.value}\n            onChange={changeHandler}\n            isInvalid={form.yearEnd.isInvalid}\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            {form.yearEnd.errorMessage}\n          </Form.Control.Feedback>\n        </Form.Group> */}\n      </div>\n      <hr />\n    </>\n  );\n};\n","d:\\My\\Coding\\Node JS\\social\\client\\src\\containers\\PrivateRoute\\index.js",[],"d:\\My\\Coding\\Node JS\\social\\client\\src\\helpers\\authStorage.js",[],"d:\\My\\Coding\\Node JS\\social\\client\\src\\config\\axiosConfig.js",[],{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","replacedBy":"206"},{"ruleId":"207","replacedBy":"208"},{"ruleId":"209","severity":1,"message":"210","line":69,"column":9,"nodeType":"211","messageId":"212","endLine":69,"endColumn":20},{"ruleId":"209","severity":1,"message":"210","line":84,"column":9,"nodeType":"211","messageId":"212","endLine":84,"endColumn":20},{"ruleId":"209","severity":1,"message":"210","line":26,"column":9,"nodeType":"211","messageId":"212","endLine":26,"endColumn":20},{"ruleId":"209","severity":1,"message":"210","line":34,"column":5,"nodeType":"211","messageId":"212","endLine":34,"endColumn":16},{"ruleId":"209","severity":1,"message":"210","line":45,"column":9,"nodeType":"211","messageId":"212","endLine":45,"endColumn":20},{"ruleId":"209","severity":1,"message":"210","line":38,"column":9,"nodeType":"211","messageId":"212","endLine":38,"endColumn":20},{"ruleId":"209","severity":1,"message":"210","line":23,"column":9,"nodeType":"211","messageId":"212","endLine":23,"endColumn":20},{"ruleId":"209","severity":1,"message":"210","line":192,"column":9,"nodeType":"211","messageId":"212","endLine":192,"endColumn":20},{"ruleId":"209","severity":1,"message":"210","line":194,"column":25,"nodeType":"211","messageId":"212","endLine":194,"endColumn":36},{"ruleId":"209","severity":1,"message":"210","line":100,"column":9,"nodeType":"211","messageId":"212","endLine":100,"endColumn":20},{"ruleId":"209","severity":1,"message":"210","line":99,"column":7,"nodeType":"211","messageId":"212","endLine":99,"endColumn":18},{"ruleId":"209","severity":1,"message":"210","line":24,"column":9,"nodeType":"211","messageId":"212","endLine":24,"endColumn":20},{"ruleId":"209","severity":1,"message":"210","line":200,"column":11,"nodeType":"211","messageId":"212","endLine":200,"endColumn":22},{"ruleId":"209","severity":1,"message":"210","line":210,"column":9,"nodeType":"211","messageId":"212","endLine":210,"endColumn":20},{"ruleId":"209","severity":1,"message":"210","line":70,"column":9,"nodeType":"211","messageId":"212","endLine":70,"endColumn":20},{"ruleId":"209","severity":1,"message":"210","line":88,"column":7,"nodeType":"211","messageId":"212","endLine":88,"endColumn":18},{"ruleId":"209","severity":1,"message":"210","line":25,"column":7,"nodeType":"211","messageId":"212","endLine":25,"endColumn":18},{"ruleId":"209","severity":1,"message":"210","line":36,"column":7,"nodeType":"211","messageId":"212","endLine":36,"endColumn":18},{"ruleId":"209","severity":1,"message":"210","line":39,"column":7,"nodeType":"211","messageId":"212","endLine":39,"endColumn":18},{"ruleId":"209","severity":1,"message":"210","line":65,"column":7,"nodeType":"211","messageId":"212","endLine":65,"endColumn":18},{"ruleId":"209","severity":1,"message":"210","line":109,"column":7,"nodeType":"211","messageId":"212","endLine":109,"endColumn":18},{"ruleId":"209","severity":1,"message":"210","line":126,"column":7,"nodeType":"211","messageId":"212","endLine":126,"endColumn":18},{"ruleId":"209","severity":1,"message":"210","line":210,"column":11,"nodeType":"211","messageId":"212","endLine":210,"endColumn":22},{"ruleId":"209","severity":1,"message":"210","line":220,"column":9,"nodeType":"211","messageId":"212","endLine":220,"endColumn":20},{"ruleId":"209","severity":1,"message":"210","line":208,"column":11,"nodeType":"211","messageId":"212","endLine":208,"endColumn":22},{"ruleId":"209","severity":1,"message":"210","line":218,"column":9,"nodeType":"211","messageId":"212","endLine":218,"endColumn":20},{"ruleId":"209","severity":1,"message":"210","line":28,"column":7,"nodeType":"211","messageId":"212","endLine":28,"endColumn":18},{"ruleId":"209","severity":1,"message":"210","line":28,"column":7,"nodeType":"211","messageId":"212","endLine":28,"endColumn":18},"lines-around-directive",["213"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","padding-line-between-statements"]